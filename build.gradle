import java.util.function.Predicate
import java.util.stream.Collectors

buildscript {
    ext {
        springBootVersion = "2.5.3"
        springDependencyVersion = "1.0.11.RELEASE"
        sourceVaadinVersion = "20.0.7"
        springCloudVersion = "2020.0.3"
        springBootAdminVersion = "2.4.3"
        vaadinVersion = "14.6.8"
        swaggerVersion = "1.5.10"
        poiVersion = "5.0.0"
        aopVersion = "2.5.6"
        notUseModules = ArrayList.of(project(':dmoim-app'), project(':dmoim-cloud'), project(':dmoim-domain'))
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyVersion}"
        classpath "com.vaadin:vaadin-gradle-plugin:${sourceVaadinVersion}"
    }

}

// 사용하는 모듈 변수 선언
def useModules = subprojects.stream().filter(new Predicate<Project>() {
    @Override
    boolean test(Project curProject) {
        return !notUseModules.contains(curProject)
    }
}).collect(Collectors.toList())

configure(useModules) {
    group "kr.dmoim"
    version "0.1.0-SNAPSHOT"

    apply plugin: "java"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"


    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    bootJar {
        enabled = false
    }
    jar {
        enabled = true
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        // log4j2 dependency
        implementation "org.springframework.boot:spring-boot-starter-log4j2"
        modules {
            module("org.springframework.boot:spring-boot-starter-logging") {
                replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
            }
        }
        implementation "com.fasterxml.jackson.core:jackson-databind"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"

        compileOnly "org.projectlombok:lombok"
        developmentOnly "org.springframework.boot:spring-boot-devtools"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        annotationProcessor "org.projectlombok:lombok"

        testCompileOnly "org.projectlombok:lombok"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        }
    }

    test {
        useJUnitPlatform()
    }
}

/* ======================= CORE ======================= */

project(":dmoim-core") {
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-webflux"
        implementation "org.springframework.boot:spring-boot-starter-aop:${aopVersion}"
        implementation "org.apache.poi:poi-ooxml:${poiVersion}"

        testImplementation "org.apache.poi:poi-ooxml:${poiVersion}"
    }
}


/* ======================= CLOUD ======================= */

project(":dmoim-cloud:api-gateway") {
    dependencies {
        implementation project(":dmoim-core")
//        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation "org.springframework.cloud:spring-cloud-starter-gateway"
        implementation "org.springdoc:springdoc-openapi-webflux-ui:${swaggerVersion}"
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

project(":dmoim-cloud:config-server") {
    dependencies {
        //implementation "org.springframework.cloud:spring-cloud-config-server"
    }
}

project(":dmoim-cloud:service-registry") {
    dependencies {
    }
}

project(":dmoim-cloud:admin-server") {
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "de.codecentric:spring-boot-admin-starter-server"
        implementation "org.springframework.boot:spring-boot-starter-security"
        testImplementation "org.springframework.security:spring-security-test"
    }
}

/* ======================= APP ======================= */

project(":dmoim-app:dmoim-oauth2") {
    dependencies {
        implementation project(":dmoim-core")
        compile project(":dmoim-domain:dmoim-domain-user")
        implementation 'org.springframework.security:spring-security-oauth2-authorization-server:0.2.0'
    }
}

project(":dmoim-app:dmoim-batch") {
    apply plugin: "com.vaadin"

    dependencies {
        implementation project(":dmoim-core")
        implementation "org.springframework.boot:spring-boot-starter-batch"
        implementation "org.springframework.boot:spring-boot-starter-quartz"
        implementation "com.vaadin:vaadin-spring-boot-starter"

    }

    dependencyManagement {
        imports {
            mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
        }
    }
}

project(":dmoim-app:dmoim-api-user") {
    dependencies {
        implementation project(":dmoim-core")
        compile project(":dmoim-domain:dmoim-domain-user")

        //implementation "org.springframework.boot:spring-boot-starter-cache"
        //implementation "org.springframework.cloud:spring-cloud-starter-config"
        //implementation "org.springframework.boot:spring-boot-starter-hateoas"
        implementation "org.springdoc:springdoc-openapi-webflux-core:${swaggerVersion}"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "de.codecentric:spring-boot-admin-starter-client"
        testImplementation "io.projectreactor:reactor-test"
    }
}

project(":dmoim-app:dmoim-api-board") {
    dependencies {
        implementation project(":dmoim-core")
        compile project(":dmoim-domain:dmoim-domain-board")
    }
}

/* ======================= DOMAIN ======================= */

project(":dmoim-domain:dmoim-domain-user") {
    dependencies {
        implementation project(":dmoim-core")
        compile "org.springframework.boot:spring-boot-starter-data-r2dbc"
        //runtimeOnly 'mysql:mysql-connector-java'
        runtimeOnly "io.r2dbc:r2dbc-h2"
    }
}

project(":dmoim-domain:dmoim-domain-board") {
    dependencies {
        implementation project(":dmoim-core")
        compile "org.springframework.boot:spring-boot-starter-data-r2dbc"
        runtimeOnly "io.r2dbc:r2dbc-h2"
    }
}

project(":dmoim-domain:dmoim-domain-option") {
    dependencies {
        implementation project(":dmoim-core")
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly "io.r2dbc:r2dbc-h2"
    }
}